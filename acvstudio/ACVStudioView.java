/*
 * ACVStudioView.java
 */

package acvstudio;

import acvstudio.elements.ACVFile;
import acvstudio.elements.Image;
import acvstudio.elements.exceptions.FrameException;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.TimerTask;
import javax.swing.InputMap;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * The application's main frame.
 */
public class ACVStudioView extends FrameView {

	private class KeyDispatcher implements KeyEventDispatcher
	{

		@Override
		public boolean dispatchKeyEvent(KeyEvent e)
		{
			if (e.getID() == KeyEvent.KEY_PRESSED)
			{
				if (e.getKeyCode() == KeyEvent.VK_RIGHT || e.getKeyCode() == KeyEvent.VK_PAGE_UP)
				{
					bNextFrameActionPerformed(null);
				}
				else if (e.getKeyCode() == KeyEvent.VK_LEFT || e.getKeyCode() == KeyEvent.VK_PAGE_DOWN)
				{
					bPrevFrameActionPerformed(null);
				}
			}
			return false;
		}
	}


	// <editor-fold defaultstate="collapsed" desc="Constructor">
    public ACVStudioView(SingleFrameApplication app)
	{
        super(app);

        initComponents();

		KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
		manager.addKeyEventDispatcher(new KeyDispatcher());

		InputMap inputMap = tfScreenNumber.getInputMap();
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_MASK), "");
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_MASK), "");
		tfScreenNumber.getCaret().setBlinkRate(0);
		//tfScreenNumber.getCaret().setVisible(false);



    }

	// </editor-fold>

    @Action
	// <editor-fold defaultstate="collapsed" desc="AboutBox">
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ACVStudioApp.getApplication().getMainFrame();
            aboutBox = new ACVStudioAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ACVStudioApp.getApplication().show(aboutBox);
    }// </editor-fold>

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        bPrevFrame = new javax.swing.JButton();
        tfScreenNumber = new javax.swing.JTextField();
        bNextFrame = new javax.swing.JButton();
        bCurrentFrame = new javax.swing.JButton();
        bCurrentScreen = new javax.swing.JButton();
        tbAutoplay = new javax.swing.JToggleButton();
        imageDisplay = new acvstudio.ImageDisplay();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        mLoadAcvFile = new javax.swing.JMenuItem();
        MiEdit = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setAutoscrolls(true);
        mainPanel.setName("mainPanel"); // NOI18N

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setFocusable(false);
        jToolBar1.setName("jToolBar1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(acvstudio.ACVStudioApp.class).getContext().getResourceMap(ACVStudioView.class);
        bPrevFrame.setIcon(resourceMap.getIcon("bPrevFrame.icon")); // NOI18N
        bPrevFrame.setText(resourceMap.getString("bPrevFrame.text")); // NOI18N
        bPrevFrame.setToolTipText(resourceMap.getString("bPrevFrame.toolTipText")); // NOI18N
        bPrevFrame.setEnabled(false);
        bPrevFrame.setFocusable(false);
        bPrevFrame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bPrevFrame.setName("bPrevFrame"); // NOI18N
        bPrevFrame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bPrevFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPrevFrameActionPerformed(evt);
            }
        });
        jToolBar1.add(bPrevFrame);

        tfScreenNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfScreenNumber.setText(resourceMap.getString("tfScreenNumber.text")); // NOI18N
        tfScreenNumber.setFocusCycleRoot(true);
        tfScreenNumber.setMaximumSize(new java.awt.Dimension(26, 2147483647));
        tfScreenNumber.setMinimumSize(new java.awt.Dimension(26, 20));
        tfScreenNumber.setName("tfScreenNumber"); // NOI18N
        tfScreenNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfScreenNumberActionPerformed(evt);
            }
        });
        jToolBar1.add(tfScreenNumber);

        bNextFrame.setIcon(resourceMap.getIcon("bNextFrame.icon")); // NOI18N
        bNextFrame.setText(resourceMap.getString("bNextFrame.text")); // NOI18N
        bNextFrame.setToolTipText(resourceMap.getString("bNextFrame.toolTipText")); // NOI18N
        bNextFrame.setEnabled(false);
        bNextFrame.setFocusable(false);
        bNextFrame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bNextFrame.setName("bNextFrame"); // NOI18N
        bNextFrame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bNextFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNextFrameActionPerformed(evt);
            }
        });
        jToolBar1.add(bNextFrame);

        bCurrentFrame.setIcon(resourceMap.getIcon("bCurrentFrame.icon")); // NOI18N
        bCurrentFrame.setText(resourceMap.getString("bCurrentFrame.text")); // NOI18N
        bCurrentFrame.setToolTipText(resourceMap.getString("bCurrentFrame.toolTipText")); // NOI18N
        bCurrentFrame.setFocusable(false);
        bCurrentFrame.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bCurrentFrame.setName("bCurrentFrame"); // NOI18N
        bCurrentFrame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bCurrentFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCurrentFrameActionPerformed(evt);
            }
        });
        jToolBar1.add(bCurrentFrame);

        bCurrentScreen.setIcon(resourceMap.getIcon("bCurrentScreen.icon")); // NOI18N
        bCurrentScreen.setText(resourceMap.getString("bCurrentScreen.text")); // NOI18N
        bCurrentScreen.setToolTipText(resourceMap.getString("bCurrentScreen.toolTipText")); // NOI18N
        bCurrentScreen.setFocusable(false);
        bCurrentScreen.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        bCurrentScreen.setName("bCurrentScreen"); // NOI18N
        bCurrentScreen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bCurrentScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCurrentScreenActionPerformed(evt);
            }
        });
        jToolBar1.add(bCurrentScreen);

        tbAutoplay.setIcon(resourceMap.getIcon("tbAutoplay.icon")); // NOI18N
        tbAutoplay.setSelected(true);
        tbAutoplay.setText(resourceMap.getString("tbAutoplay.text")); // NOI18N
        tbAutoplay.setFocusable(false);
        tbAutoplay.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        tbAutoplay.setName("tbAutoplay"); // NOI18N
        tbAutoplay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbAutoplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbAutoplayActionPerformed(evt);
            }
        });
        jToolBar1.add(tbAutoplay);

        imageDisplay.setBackground(resourceMap.getColor("imageDisplay.background")); // NOI18N
        imageDisplay.setFocusable(false);
        imageDisplay.setName("imageDisplay"); // NOI18N
        imageDisplay.setPreferredSize(new java.awt.Dimension(521, 378));

        javax.swing.GroupLayout imageDisplayLayout = new javax.swing.GroupLayout(imageDisplay);
        imageDisplay.setLayout(imageDisplayLayout);
        imageDisplayLayout.setHorizontalGroup(
            imageDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 422, Short.MAX_VALUE)
        );
        imageDisplayLayout.setVerticalGroup(
            imageDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 336, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
            .addComponent(imageDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        mLoadAcvFile.setText(resourceMap.getString("mLoadAcvFile.text")); // NOI18N
        mLoadAcvFile.setName("mLoadAcvFile"); // NOI18N
        mLoadAcvFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLoadAcvFileActionPerformed(evt);
            }
        });
        fileMenu.add(mLoadAcvFile);

        MiEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        MiEdit.setText(resourceMap.getString("MiEdit.text")); // NOI18N
        MiEdit.setName("MiEdit"); // NOI18N
        MiEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiEditActionPerformed(evt);
            }
        });
        fileMenu.add(MiEdit);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(acvstudio.ACVStudioApp.class).getContext().getActionMap(ACVStudioView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

	private void tfScreenNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfScreenNumberActionPerformed
		
		int no = frameNumber;
		
		try
		{
			no = new Integer (tfScreenNumber.getText()) - 1;
			setFrameTo(no);
		}
		catch (Exception e) {}

	}//GEN-LAST:event_tfScreenNumberActionPerformed

	private void bPrevFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPrevFrameActionPerformed

		if (file == null) return; //File not loaded

		setFrameTo(frameNumber - 1, true);


	}//GEN-LAST:event_bPrevFrameActionPerformed

	private void mLoadAcvFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLoadAcvFileActionPerformed
		
		FileFilter filter = new FileNameExtensionFilter("ACV files", "acv");
		filechooser.addChoosableFileFilter(filter);

		int ret = filechooser.showDialog(null, "Open an ACV file");

		if (ret == JFileChooser.APPROVE_OPTION)
		{
			loadFile(filechooser.getSelectedFile());
		}
	}//GEN-LAST:event_mLoadAcvFileActionPerformed

	public void loadFile(File f)
	{
		try
		{
			file = new ACVFile(f);
			setFrameTo(0);
		}
		catch (IOException e)
		{

			JOptionPane.showMessageDialog(mainPanel, "Selected file is not a valid ACV file", "Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void bCurrentFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCurrentFrameActionPerformed

		if (file == null) return;
		
		try
		{
			Image image = file.getFrame(frameNumber);
			image.getProperties().removeEffects();
			imageDisplay.loadImage(image, false);
		}
		catch (FrameException e) { System.out.println("Unexpected exception currentFrame@ACVStudioView: " + e.toString()); }
	}//GEN-LAST:event_bCurrentFrameActionPerformed

	private void bNextFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNextFrameActionPerformed

		if (file == null) return;

		setFrameTo(frameNumber + 1);			

	}//GEN-LAST:event_bNextFrameActionPerformed

	private void MiEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiEditActionPerformed

		acvedit.loadFile(file);

		//JFrame mainFrame = ACVStudioApp.getApplication().getMainFrame();
        //acvedit.setLocationRelativeTo(mainFrame);

        //ACVStudioApp.getApplication().show(acvedit);

		acvedit.setVisible(true);
		
		acvedit.addWindowListener(
			new WindowAdapter()
			{
				@Override
				public void windowClosing(WindowEvent e)
				{
					setFrameTo(0);
					acvedit.setVisible(false);
				}
			} );
	}//GEN-LAST:event_MiEditActionPerformed

	private void bCurrentScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCurrentScreenActionPerformed

		if (file == null) return;
		
		try
		{
			Image image = file.getScreen(frameNumber);
			image.getProperties().removeEffects();
			imageDisplay.loadImage(image, false);
		}
		catch (FrameException e) { System.out.println("Unexpected exception currentScreen@ACVStudioView: " + e.toString()); }
	}//GEN-LAST:event_bCurrentScreenActionPerformed

	private void tbAutoplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbAutoplayActionPerformed
		setAutoplay();
	}//GEN-LAST:event_tbAutoplayActionPerformed

	private void setAutoplay()
	{
		if (tbAutoplay.isSelected() && autoplay != 0)
		{
			autoplayTimer = new java.util.Timer();
			autoplayTimer.schedule(new TimerTask()
				{
					@Override
					public void run()
					{
						if (autoplayTimer != null) autoplayTimer.cancel();
						setFrameTo(frameNumber+1);						
					}
				}
				,autoplay);
		}
	}

	private void setFrameTo(int frameNo)
	{
		setFrameTo(frameNo, false);
	}

	private void setFrameTo(int frameNo, boolean backwards)
	{
		if (file == null) return; //File not loaded
		
		if (autoplayTimer != null)
		{
			autoplayTimer.cancel();
			autoplayTimer = null;
		}

		try
		{
			Image img = file.getFrame(frameNo);
			
			//Set window title
			this.getFrame().setTitle("ACV Studio - " + img.getProperties().getProperties().getTitle());

			//Load image
			imageDisplay.loadImage(img, backwards);
			frameNumber = frameNo;

			//Display screen number
			tfScreenNumber.setText(new Integer(frameNumber + 1).toString());

			//Set timer for autoplay
			if (img.getProperties().isAutoplay() && !backwards)
			{
				autoplay = (int) (img.getProperties().getDurationAutoplay()*1000);
				setAutoplay();
			}
			else
				autoplay = 0;
		}
		catch (FrameException e) { } //End of comic file

		//Disable arrows when there are no more pages
		if (frameNumber == 0) bPrevFrame.setEnabled(false);
		else bPrevFrame.setEnabled(true);

		if (!file.containsFrame(frameNumber+1)) bNextFrame.setEnabled(false);
		else bNextFrame.setEnabled(true);

	}
	


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MiEdit;
    private javax.swing.JButton bCurrentFrame;
    private javax.swing.JButton bCurrentScreen;
    private javax.swing.JButton bNextFrame;
    private javax.swing.JButton bPrevFrame;
    private acvstudio.ImageDisplay imageDisplay;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem mLoadAcvFile;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JToggleButton tbAutoplay;
    private javax.swing.JTextField tfScreenNumber;
    // End of variables declaration//GEN-END:variables

   

    private JDialog aboutBox;

	private ACVFile file;
	private int frameNumber;
	private JFileChooser filechooser = new JFileChooser();
	private ACVEditFrame acvedit = new ACVEditFrame();
	private int autoplay = 0;
	private java.util.Timer autoplayTimer = null;
}
